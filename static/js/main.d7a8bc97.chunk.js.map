{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","state","web3","account","token","dbank","balance","dBankAddress","tokenBalance","a","this","loadBlockchainData","window","ethereum","Web3","eth","net","getId","netId","enable","console","log","getAccounts","accounts","getBalance","setState","utils","fromWei","alert","Contract","Token","abi","networks","address","methods","balanceOf","call","dBank","amount","deposit","send","value","toString","from","e","preventDefault","withdraw","borrow","collateralEther","tokenBorrowed","approve","payOff","className","role","Tabs","defaultActiveKey","id","Tab","eventKey","title","onSubmit","depositAmount","step","type","ref","input","placeholder","required","onClick","borrowAmount","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7a8bc97.chunk.js","sourcesContent":["import { Tabs, Tab } from \"react-bootstrap\";\nimport dBank from \"../artifacts/dBank.json\";\nimport React, { Component } from \"react\";\nimport Token from \"../artifacts/Token.json\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      web3: \"undefined\",\n      account: \"\",\n      token: null,\n      dbank: null,\n      balance: 0,\n      dBankAddress: null,\n      tokenBalance: 0,\n    };\n  }\n\n  async componentWillMount() {\n    await this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    if (typeof window.ethereum !== \"undefined\") {\n      const web3 = new Web3(window.ethereum);\n      const netId = await web3.eth.net.getId();\n\n      try {\n        await window.ethereum.enable();\n      } catch (error) {\n        console.log(error);\n      }\n      const accounts = await web3.eth.getAccounts();\n      //load balance\n      if (typeof accounts[0] !== \"undefined\") {\n        const balance = await web3.eth.getBalance(accounts[0]);\n        this.setState({\n          account: accounts[0],\n          balance: web3.utils.fromWei(balance, \"ether\"),\n          web3: web3,\n        });\n      } else {\n        window.alert(\"Please login with MetaMask\");\n      }\n\n      //load contracts\n      try {\n        const token = new web3.eth.Contract(\n          Token.abi,\n          Token.networks[netId].address\n        );\n\n        console.log(this.state.account);\n\n        const tokenBalance = await token.methods\n          .balanceOf(this.state.account)\n          .call();\n\n        console.log(tokenBalance);\n\n        const dbank = new web3.eth.Contract(\n          dBank.abi,\n          dBank.networks[netId].address\n        );\n        const dBankAddress = dBank.networks[netId].address;\n        this.setState({\n          token: token,\n          dbank: dbank,\n          dBankAddress: dBankAddress,\n          tokenBalance: web3.utils.fromWei(tokenBalance),\n        });\n      } catch (e) {\n        console.log(\"Error\", e);\n        window.alert(\"Contracts not deployed to the current network\");\n      }\n    } else {\n      window.alert(\"Please install MetaMask\");\n    }\n  }\n\n  async deposit(amount) {\n    if (this.state.dbank !== \"undefined\") {\n      try {\n        await this.state.dbank.methods\n          .deposit()\n          .send({ value: amount.toString(), from: this.state.account });\n      } catch (e) {\n        console.log(\"Error, deposit: \", e);\n      }\n    }\n  }\n\n  async withdraw(e) {\n    e.preventDefault();\n    if (this.state.dbank !== \"undefined\") {\n      try {\n        await this.state.dbank.methods\n          .withdraw()\n          .send({ from: this.state.account });\n      } catch (e) {\n        console.log(\"Error, withdraw: \", e);\n      }\n    }\n  }\n\n  async borrow(amount) {\n    if (this.state.dbank !== \"undefined\") {\n      try {\n        await this.state.dbank.methods\n          .borrow()\n          .send({ value: amount.toString(), from: this.state.account });\n      } catch (e) {\n        console.log(\"Error, borrow: \", e);\n      }\n    }\n  }\n\n  async payOff(e) {\n    e.preventDefault();\n    if (this.state.dbank !== \"undefined\") {\n      try {\n        const collateralEther = await this.state.dbank.methods\n          .collateralEther(this.state.account)\n          .call({ from: this.state.account });\n        const tokenBorrowed = collateralEther / 2;\n        await this.state.token.methods\n          .approve(this.state.dBankAddress, tokenBorrowed.toString())\n          .send({ from: this.state.account });\n        await this.state.dbank.methods\n          .payOff()\n          .send({ from: this.state.account });\n      } catch (e) {\n        console.log(\"Error, pay off: \", e);\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"text-monospace\">\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <div className=\"mt-2 mb-2 ml-3 text-white\">DeBank</div>\n        </nav>\n        <div className=\"container-fluid mt-5 text-center\">\n          <br></br>\n          <h1>Welcome to DeBank</h1>\n          <h2>{this.state.account}</h2>\n          <h2>Current balance: {this.state.balance}</h2>\n          <h2>Current token balance: {this.state.tokenBalance}</h2>\n\n          <br></br>\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\">\n                  <Tab eventKey=\"deposit\" title=\"Deposit\">\n                    <div>\n                      <br></br>\n                      How much do you want to deposit?\n                      <br></br>\n                      (min. amount is 0.01 ETH)\n                      <br></br>\n                      (1 deposit is possible at the time)\n                      <br></br>\n                      <form\n                        onSubmit={(e) => {\n                          e.preventDefault();\n                          let amount = this.depositAmount.value;\n                          amount = amount * 10 ** 18; //convert to wei\n                          this.deposit(amount);\n                        }}\n                      >\n                        <div className=\"form-group mr-sm-2\">\n                          <br></br>\n                          <input\n                            id=\"depositAmount\"\n                            step=\"0.01\"\n                            type=\"number\"\n                            ref={(input) => {\n                              this.depositAmount = input;\n                            }}\n                            className=\"form-control form-control-md\"\n                            placeholder=\"amount...\"\n                            required\n                          />\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-primary\">\n                          DEPOSIT\n                        </button>\n                      </form>\n                    </div>\n                  </Tab>\n                  <Tab eventKey=\"withdraw\" title=\"Withdraw\">\n                    <br></br>\n                    Do you want to withdraw + take interest?\n                    <br></br>\n                    <br></br>\n                    <div>\n                      <button\n                        type=\"submit\"\n                        className=\"btn btn-primary\"\n                        onClick={(e) => this.withdraw(e)}\n                      >\n                        WITHDRAW\n                      </button>\n                    </div>\n                  </Tab>\n                  <Tab eventKey=\"borrow\" title=\"Borrow\">\n                    <div>\n                      <br></br>\n                      Do you want to borrow tokens?\n                      <br></br>\n                      (You'll get 50% of collateral, in Tokens)\n                      <br></br>\n                      Type collateral amount (in ETH)\n                      <br></br>\n                      <br></br>\n                      <form\n                        onSubmit={(e) => {\n                          e.preventDefault();\n                          let amount = this.borrowAmount.value;\n                          amount = amount * 10 ** 18; //convert to wei\n                          this.borrow(amount);\n                        }}\n                      >\n                        <div className=\"form-group mr-sm-2\">\n                          <input\n                            id=\"borrowAmount\"\n                            step=\"0.01\"\n                            type=\"number\"\n                            ref={(input) => {\n                              this.borrowAmount = input;\n                            }}\n                            className=\"form-control form-control-md\"\n                            placeholder=\"amount...\"\n                            required\n                          />\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-primary\">\n                          BORROW\n                        </button>\n                      </form>\n                    </div>\n                  </Tab>\n                  <Tab eventKey=\"payOff\" title=\"Payoff\">\n                    <div>\n                      <br></br>\n                      Do you want to payoff the loan?\n                      <br></br>\n                      (You'll receive your collateral - fee)\n                      <br></br>\n                      <br></br>\n                      <button\n                        type=\"submit\"\n                        className=\"btn btn-primary\"\n                        onClick={(e) => this.payOff(e)}\n                      >\n                        PAYOFF\n                      </button>\n                    </div>\n                  </Tab>\n                </Tabs>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}